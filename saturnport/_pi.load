../cutscene.cpp:	if (!(_stub->_pi.dbgMask & PlayerInput::DF_FASTMODE)) {
../cutscene.cpp:		int32 delay = _stub->getTimeStamp() - _tstamp;
../cutscene.cpp:			_stub->sleep(pause);
../cutscene.cpp:	_tstamp = _stub->getTimeStamp();
../cutscene.cpp:			_stub->setPaletteEntry(0xC0 + i, &c);
../cutscene.cpp:	_stub->copyRect(0, 0, Video::GAMESCREEN_W, Video::GAMESCREEN_H, _page0, 256);
../cutscene.cpp:	_stub->updateScreen(0);
../cutscene.cpp:					_stub->copyRect(0, 0, Video::GAMESCREEN_W, Video::GAMESCREEN_H, _page1, 256);
../cutscene.cpp:					_stub->updateScreen(0);
../cutscene.cpp:					_stub->sleep(15);
../cutscene.cpp:			b = (_stub->_pi.dirMask & PlayerInput::DIR_UP) != 0;
../cutscene.cpp:			b = (_stub->_pi.dirMask & PlayerInput::DIR_DOWN) != 0;
../cutscene.cpp:			b = (_stub->_pi.dirMask & PlayerInput::DIR_LEFT) != 0;
../cutscene.cpp:			b = (_stub->_pi.dirMask & PlayerInput::DIR_RIGHT) != 0;
../cutscene.cpp:			b = _stub->_pi.space || _stub->_pi.enter || _stub->_pi.shift;
../cutscene.cpp:	_stub->_pi.dirMask = 0;
../cutscene.cpp:	_stub->_pi.enter = false;
../cutscene.cpp:	_stub->_pi.space = false;
../cutscene.cpp:	_stub->_pi.shift = false;
../cutscene.cpp:	_tstamp = _stub->getTimeStamp();
../cutscene.cpp:		_stub->setPaletteEntry(0xC0 + i, &c);
../cutscene.cpp:	while (!_stub->_pi.quit && !_interrupted && !_stop) {
../cutscene.cpp:		//_stub->processEvents();
../cutscene.cpp:		if (_stub->_pi.backspace) {
../cutscene.cpp:			_stub->_pi.backspace = false;
../cutscene.cpp:	_stub->_pi.dirMask = 0;
../cutscene.cpp:	_stub->_pi.enter = false;
../cutscene.cpp:	_stub->_pi.space = false;
../cutscene.cpp:	_stub->_pi.shift = false;
../cutscene.cpp:	while (!_stub->_pi.quit && !_interrupted) {
../game.cpp:	_stub->init("REminiscence", Video::GAMESCREEN_W, Video::GAMESCREEN_H);
../game.cpp:	if (_stub->_pi.quit) {
../game.cpp:	while (!_stub->_pi.quit && _menu.handleTitleScreen(_skillLevel, _currentLevel)) {
../game.cpp:			_stub->setOverscanColor(0xE0);
../game.cpp:	_stub->destroy();
../game.cpp:	while (!_stub->_pi.quit) {
../game.cpp:		if (_stub->_pi.backspace) {
../game.cpp:			_stub->_pi.backspace = false;
../game.cpp:		if (_stub->_pi.escape) {
../game.cpp:			_stub->_pi.escape = false;
../game.cpp:	int32 delay = _stub->getTimeStamp() - tstamp;
../game.cpp:	int32 pause = (_stub->_pi.dbgMask & PlayerInput::DF_FASTMODE) ? 20 : 30;
../game.cpp:		_stub->sleep(pause);
../game.cpp:	tstamp = _stub->getTimeStamp();
../game.cpp:	if (_stub->_pi.dbgMask & PlayerInput::DF_SETLIFE) {
../game.cpp:	if (_stub->_pi.load) {
../game.cpp:		_stub->_pi.load = false;
../game.cpp:	if (_stub->_pi.save) {
../game.cpp:		_stub->_pi.save = false;
../game.cpp:	if (_stub->_pi.stateSlot != 0) {
../game.cpp:		int8 slot = _stateSlot + _stub->_pi.stateSlot;
../game.cpp:		_stub->_pi.stateSlot = 0;
../game.cpp:	if (_stub->_pi.inpRecord || _stub->_pi.inpReplay) {
../game.cpp:		if (_stub->_pi.inpRecord) {
../game.cpp:		if (_stub->_pi.inpReplay) {
../game.cpp:		_stub->_pi.inpReplay = false;
../game.cpp:		_stub->_pi.inpRecord = false;
../game.cpp:	while (!_stub->_pi.quit) {
../game.cpp:		_stub->copyRect(0, 0, Video::GAMESCREEN_W, Video::GAMESCREEN_H, _vid._frontLayer, 256);
../game.cpp:		_stub->updateScreen(0);
../game.cpp:		//_stub->processEvents();
../game.cpp:		if (_stub->_pi.enter) {
../game.cpp:			_stub->_pi.enter = false;
../game.cpp:		_stub->sleep(100);
../game.cpp:	while (!_stub->_pi.quit) {
../game.cpp:		_stub->sleep(80);
../game.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_UP) {
../game.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_UP;
../game.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_DOWN) {
../game.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_DOWN;
../game.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_LEFT) {
../game.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_LEFT;
../game.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_RIGHT) {
../game.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_RIGHT;
../game.cpp:		if (_stub->_pi.enter) {
../game.cpp:			_stub->_pi.enter = false;
../game.cpp:				_stub->_pi.load = true;
../game.cpp:				_stub->_pi.save = true;
../game.cpp:	_stub->getPaletteEntry(0xE4, &col);
../game.cpp:	while (timeout >= 0 && !_stub->_pi.quit) {
../game.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_UP) {
../game.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_UP;
../game.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_DOWN) {
../game.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_DOWN;
../game.cpp:		if (_stub->_pi.enter) {
../game.cpp:			_stub->_pi.enter = false;
../game.cpp:		_stub->copyRect(0, 0, Video::GAMESCREEN_W, Video::GAMESCREEN_H, _vid._frontLayer, 256);
../game.cpp:		_stub->updateScreen(0);
../game.cpp:		_stub->setPaletteEntry(0xE4, &col);
../game.cpp:		//_stub->processEvents();
../game.cpp:		_stub->sleep(100);
../game.cpp:		_stub->copyRect(0, 0, Video::GAMESCREEN_W, Video::GAMESCREEN_H, _vid._tempLayer, 256);
../game.cpp:		_stub->updateScreen(0);
../game.cpp:		_stub->sleep(30);
../game.cpp:		_stub->sleep(50);
../game.cpp:		//_stub->processEvents();
../game.cpp:		char c = _stub->_pi.lastChar;
../game.cpp:			_stub->_pi.lastChar = 0;
../game.cpp:		if (_stub->_pi.backspace) {
../game.cpp:			_stub->_pi.backspace = false;
../game.cpp:		if (_stub->_pi.enter) {
../game.cpp:			_stub->_pi.enter = false;
../game.cpp:	} while (!_stub->_pi.quit);
../game.cpp:		while (!_stub->_pi.quit) {
../game.cpp:			while (!_stub->_pi.backspace && !_stub->_pi.quit) {
../game.cpp:				_stub->sleep(80);
../game.cpp:			_stub->_pi.backspace = false;
../game.cpp:		while (!_stub->_pi.backspace && !_stub->_pi.quit) {
../game.cpp:			_stub->sleep(80);
../game.cpp:			if (_stub->_pi.dirMask & PlayerInput::DIR_UP) {
../game.cpp:				_stub->_pi.dirMask &= ~PlayerInput::DIR_UP;
../game.cpp:			if (_stub->_pi.dirMask & PlayerInput::DIR_DOWN) {
../game.cpp:				_stub->_pi.dirMask &= ~PlayerInput::DIR_DOWN;
../game.cpp:			if (_stub->_pi.dirMask & PlayerInput::DIR_LEFT) {
../game.cpp:				_stub->_pi.dirMask &= ~PlayerInput::DIR_LEFT;
../game.cpp:			if (_stub->_pi.dirMask & PlayerInput::DIR_RIGHT) {
../game.cpp:				_stub->_pi.dirMask &= ~PlayerInput::DIR_RIGHT;
../game.cpp:			if (_stub->_pi.enter) {
../game.cpp:				_stub->_pi.enter = false;
../game.cpp:		_stub->_pi.backspace = false;
../game.cpp:			_stub->_pi.dirMask = keymask & 0xF;
../game.cpp:			_stub->_pi.enter = (keymask & 0x10) != 0;
../game.cpp:			_stub->_pi.space = (keymask & 0x20) != 0;
../game.cpp:			_stub->_pi.shift = (keymask & 0x40) != 0;
../game.cpp:			_stub->_pi.quit = (keymask & 0x80) != 0;
../game.cpp:	//_stub->processEvents();
../game.cpp:		uint8 keymask = _stub->_pi.dirMask;
../game.cpp:		if (_stub->_pi.enter) {
../game.cpp:		if (_stub->_pi.space) {
../game.cpp:		if (_stub->_pi.shift) {
../game.cpp:		if (_stub->_pi.quit) {
../menu.cpp:	_stub->setPalette(_res->_memBuf, 256);
../menu.cpp:		_stub->sleep(EVENTS_DELAY);
../menu.cpp:		//_stub->processEvents();
../menu.cpp:		if (_stub->_pi.enter) {
../menu.cpp:			_stub->_pi.enter = false;
../menu.cpp:	} while (!_stub->_pi.quit);
../menu.cpp:		_stub->sleep(EVENTS_DELAY);
../menu.cpp:		//_stub->processEvents();
../menu.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_UP) {
../menu.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_UP;
../menu.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_DOWN) {
../menu.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_DOWN;
../menu.cpp:		if (_stub->_pi.enter) {
../menu.cpp:			_stub->_pi.enter = false;
../menu.cpp:	} while (!_stub->_pi.quit);
../menu.cpp:		_stub->sleep(EVENTS_DELAY * 4);
../menu.cpp:		//_stub->processEvents();
../menu.cpp:		if((_stub->_pi.dirMask & PlayerInput::DIR_DOWN) && (difficulty > 0)) {
../menu.cpp:		} else if ((_stub->_pi.dirMask & PlayerInput::DIR_UP) && (difficulty < 2)) {
../menu.cpp:		if((_stub->_pi.dirMask & PlayerInput::DIR_LEFT) && (selLevel > 0)) {
../menu.cpp:		} else if ((_stub->_pi.dirMask & PlayerInput::DIR_RIGHT) && (selLevel < 7)) {
../menu.cpp:		if (_stub->_pi.enter) {
../menu.cpp:			_stub->_pi.enter = false;
../menu.cpp:	} while (!_stub->_pi.quit);
../menu.cpp:		_stub->sleep(EVENTS_DELAY);
../menu.cpp:		//_stub->processEvents();
../menu.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_UP) {
../menu.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_UP;
../menu.cpp:		if (_stub->_pi.dirMask & PlayerInput::DIR_DOWN) {
../menu.cpp:			_stub->_pi.dirMask &= ~PlayerInput::DIR_DOWN;
../menu.cpp:		if (_stub->_pi.enter) {
../menu.cpp:			_stub->_pi.enter = false;
../menu.cpp:		if (_stub->_pi.quit) {
../mixer.cpp:	_mutex = _stub->createMutex();
../mixer.cpp:	_stub->startAudio(Mixer::mixCallback, this);
../mixer.cpp:	_stub->stopAudio();
../mixer.cpp:	_stub->destroyMutex(_mutex);
../mixer.cpp:		ch->chunkInc = (freq << FRAC_BITS) / _stub->getOutputSampleRate();
../mixer.cpp:	return _stub->getOutputSampleRate();
../piege.cpp:	_inp_lastKeysHit = _stub->_pi.dirMask;
../piege.cpp:	if (_stub->_pi.mirrorMode && (_inp_lastKeysHit & 0xC)) {
../piege.cpp:	if (_stub->_pi.enter) {
../piege.cpp:	if (_stub->_pi.space) {
../piege.cpp:	if (_stub->_pi.shift) {
../systemstub.h:		_stub->lockMutex(_mutex);
../systemstub.h:		_stub->unlockMutex(_mutex);
../video.cpp:		_stub->copyRect(0, 0, Video::GAMESCREEN_W, Video::GAMESCREEN_H, _frontLayer, 256);
../video.cpp:		_stub->updateScreen(_shakeOffset);
../video.cpp:					_stub->copyRect(x, j * SCREENBLOCK_H, nh * SCREENBLOCK_W, SCREENBLOCK_H, _frontLayer, 256);
../video.cpp:				_stub->copyRect(x, j * SCREENBLOCK_H, nh * SCREENBLOCK_W, SCREENBLOCK_H, _frontLayer, 256);
../video.cpp:			_stub->updateScreen(_shakeOffset);
../video.cpp:			_stub->getPaletteEntry(c, &col);
../video.cpp:			_stub->setPaletteEntry(c, &col);
../video.cpp:		_stub->sleep(50);
../video.cpp:		_stub->setPaletteEntry(palSlot * 0x10 + i, &c);
../video.cpp:		_stub->setPaletteEntry(palSlot * 0x10 + i, &c);
../video.cpp:		_stub->setPaletteEntry(0xE0 + i, &c);
../video.cpp:		_stub->setPaletteEntry(0xF0 + i, &c);
